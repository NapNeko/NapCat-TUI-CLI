#!/bin/bash

# --- 基本配置 ---
NAPCAT_DIR="/opt/QQ/resources/app/app_launcher/napcat"
CONFIG_DIR="$NAPCAT_DIR/config" # 与其他脚本保持一致
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
BOOT_SCRIPT="$SCRIPT_DIR/_napcat_Boot"
CONFIG_SCRIPT="$SCRIPT_DIR/_napcat_Config"
OLD_CLI_SCRIPT="$SCRIPT_DIR/_napcat_old" # 新增：定义旧版 CLI 脚本路径
API_SCRIPT="$SCRIPT_DIR/api.sh"
INIT_FLAG="/var/run/NapcatShellinit.flag" # 首次运行标记文件
INSTALL_SCRIPT_URL="https://nclatest.znin.net/NapNeko/NapCat-Installer/main/script/install.sh"
INSTALL_SCRIPT_LOCAL="napcat_install.sh" # 本地安装脚本文件名


if [[ "$#" -gt 0 ]]; then
    if [[ -f "$OLD_CLI_SCRIPT" ]] && [[ -x "$OLD_CLI_SCRIPT" ]]; then
        # _napcat_old 脚本应自行处理其可能需要的 root 权限检查
        exec "$OLD_CLI_SCRIPT" "$@"
    else
        # 使用 ANSI 红色输出错误信息到 stderr
        echo -e "\033[0;1;31;91m错误: 旧版 CLI 脚本 '$OLD_CLI_SCRIPT' 未找到或不可执行。\033[0m" >&2
        exit 1
    fi
    # 如果 exec 成功，当前脚本的执行会在此处终止
fi


# --- Dialog 颜色定义 ---
RESET='\Zn'
BOLD='\Zb'
FG_BLACK='\Z0'
FG_RED='\Z1'
FG_GREEN='\Z2'
FG_YELLOW='\Z3'
FG_BLUE='\Z4'
FG_MAGENTA='\Z5'
FG_CYAN='\Z6'
FG_WHITE='\Z7'

# --- ANSI 颜色定义 (用于 echo -e) ---
ANSI_RESET='\e[0m'
ANSI_BOLD='\e[1m'
ANSI_RED='\e[31m'
ANSI_GREEN='\e[32m'
ANSI_YELLOW='\e[33m'
ANSI_BLUE='\e[34m'
ANSI_MAGENTA='\e[35m'
ANSI_CYAN='\e[36m'
ANSI_WHITE='\e[37m'

# --- Root 权限检查 ---
if [[ $EUID -ne 0 ]]; then
   if sudo -n true &> /dev/null; then
       sudo "$0" "$@"
       exit $?
   else
       if command -v dialog &> /dev/null; then
           dialog --colors --title "需要权限" --msgbox "${FG_YELLOW}此脚本需要 root 权限来执行安装、管理服务和读写系统文件。\n\n将通过 sudo 请求密码以获取权限。${RESET}" 10 70 2>&1 >/dev/tty
           clear
       else
           echo -e "${ANSI_YELLOW}提示: 此脚本需要 root 权限。${ANSI_RESET}" >&2
           echo "将通过 sudo 请求密码以获取权限..." >&2
       fi
       sudo "$0" "$@"
       exit $?
   fi
fi

# --- 依赖检查 (dialog 必须先检查，因为后续提示依赖它) ---
if ! command -v dialog &> /dev/null; then
    echo -e "${ANSI_RED}错误: 核心依赖 'dialog' 未找到！${ANSI_RESET}" >&2
    echo "请先手动安装 dialog (例如: sudo apt install dialog) 再运行此脚本。" >&2
    exit 1
fi

# 支持的系统有ubuntu20+/debian10+、centos7+

# --- Napcat 安装检查 ---
if [[ ! -d "$NAPCAT_DIR" ]]; then
    dialog --colors --title "Napcat 未安装" --yesno "检测到 Napcat 可能未安装 (目录 '$NAPCAT_DIR' 不存在)。\n\n是否现在下载并执行官方安装脚本？" 10 70 2>&1 >/dev/tty
    choice=$?
    clear
    if [[ $choice -eq 0 ]]; then # Yes
        dialog --colors --title "正在安装 Napcat" --infobox "正在从 $INSTALL_SCRIPT_URL 下载安装脚本..." 5 70
        if curl -Lo "$INSTALL_SCRIPT_LOCAL" "$INSTALL_SCRIPT_URL"; then
            dialog --colors --title "正在安装 Napcat" --infobox "下载完成，正在执行安装脚本 (sudo bash $INSTALL_SCRIPT_LOCAL)..." 5 70
            # 赋予执行权限并执行
            chmod +x "$INSTALL_SCRIPT_LOCAL"
            if sudo bash "$INSTALL_SCRIPT_LOCAL"; then
                dialog --colors --title "安装成功" --msgbox "Napcat 安装脚本执行成功！\n请重新运行 NapcatShell 以继续。" 8 60
                rm -f "$INSTALL_SCRIPT_LOCAL" # 清理安装脚本
                exit 0
            else
                dialog --colors --title "安装失败" --msgbox "${FG_RED}Napcat 安装脚本执行失败。${RESET}\n请检查上面的错误信息或尝试手动安装。" 8 60
                rm -f "$INSTALL_SCRIPT_LOCAL" # 清理安装脚本
                exit 1
            fi
        else
            dialog --colors --title "下载失败" --msgbox "${FG_RED}无法下载安装脚本: $INSTALL_SCRIPT_URL${RESET}\n请检查网络连接或 URL 是否有效。" 8 70
            exit 1
        fi
    else # No or Cancel
        dialog --colors --title "已取消" --msgbox "已跳过 Napcat 安装。脚本无法继续。" 6 50
        exit 0
    fi
fi

# --- 首次运行依赖检查与安装 ---
if [[ ! -f "$INIT_FLAG" ]]; then
    dialog --colors --title "首次运行设置" --infobox "正在进行首次运行设置，检查所需依赖..." 5 60
    sleep 1

    dependencies=("sudo" "dialog" "jq" "pgrep" "ffmpeg" "curl" "ps" "kill" "grep" "sed" "tee" "mktemp" "flock" "ss") # 添加更多基础命令
    missing_deps=()
    install_needed=false

    # 首次检查
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
            install_needed=true
        fi
    done

    if $install_needed; then
        dialog --colors --title "依赖缺失" --infobox "检测到以下依赖缺失，将尝试自动安装：\n${missing_deps[*]}" 8 60
        sleep 2

        package_manager=""
        install_cmd=""
        update_cmd=""
        install_opts="-y" # 默认使用 -y

        if command -v apt-get &> /dev/null; then
            package_manager="apt-get"
            update_cmd="sudo apt-get update"
            # Debian/Ubuntu 包名映射 (可能不完整)
            declare -A pkg_map=( ["pgrep"]="procps" ["ffmpeg"]="ffmpeg" ["jq"]="jq" ["dialog"]="dialog" ["curl"]="curl" ["ps"]="procps" ["kill"]="procps" ["grep"]="grep" ["sed"]="sed" ["tee"]="coreutils" ["mktemp"]="coreutils" ["flock"]="util-linux" ["ss"]="iproute2" ["sudo"]="sudo" )
            install_packages=()
            for dep in "${missing_deps[@]}"; do
                pkg=${pkg_map[$dep]}
                [[ -n "$pkg" ]] && install_packages+=("$pkg")
            done
            # 去重
            install_packages=($(echo "${install_packages[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            [[ ${#install_packages[@]} -gt 0 ]] && install_cmd="sudo $package_manager install $install_opts ${install_packages[*]}"

        elif command -v yum &> /dev/null; then
            package_manager="yum"
            update_cmd="" # yum 通常不需要显式 update
            # CentOS/RHEL 包名映射
            declare -A pkg_map=( ["pgrep"]="procps-ng" ["ffmpeg"]="ffmpeg" ["jq"]="jq" ["dialog"]="dialog" ["curl"]="curl" ["ps"]="procps-ng" ["kill"]="procps-ng" ["grep"]="grep" ["sed"]="sed" ["tee"]="coreutils" ["mktemp"]="coreutils" ["flock"]="util-linux" ["ss"]="iproute" ["sudo"]="sudo" )
            # CentOS 可能需要 epel-release 来安装 jq 和 ffmpeg
            needs_epel=false
            for dep in "${missing_deps[@]}"; do
                if [[ "$dep" == "jq" || "$dep" == "ffmpeg" ]]; then
                    needs_epel=true
                    break
                fi
            done
            if $needs_epel && ! rpm -q epel-release &>/dev/null; then
                 update_cmd="sudo yum install $install_opts epel-release" # 先装 epel
            fi
            install_packages=()
            for dep in "${missing_deps[@]}"; do
                pkg=${pkg_map[$dep]}
                [[ -n "$pkg" ]] && install_packages+=("$pkg")
            done
            install_packages=($(echo "${install_packages[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            [[ ${#install_packages[@]} -gt 0 ]] && install_cmd="sudo $package_manager install $install_opts ${install_packages[*]}"

        elif command -v dnf &> /dev/null; then
            package_manager="dnf"
            update_cmd="" # dnf 通常不需要
            # Fedora 包名映射
             declare -A pkg_map=( ["pgrep"]="procps-ng" ["ffmpeg"]="ffmpeg" ["jq"]="jq" ["dialog"]="dialog" ["curl"]="curl" ["ps"]="procps-ng" ["kill"]="procps-ng" ["grep"]="grep" ["sed"]="sed" ["tee"]="coreutils" ["mktemp"]="coreutils" ["flock"]="util-linux" ["ss"]="iproute" ["sudo"]="sudo" )
            install_packages=()
            for dep in "${missing_deps[@]}"; do
                pkg=${pkg_map[$dep]}
                [[ -n "$pkg" ]] && install_packages+=("$pkg")
            done
            install_packages=($(echo "${install_packages[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
            [[ ${#install_packages[@]} -gt 0 ]] && install_cmd="sudo $package_manager install $install_opts ${install_packages[*]}"
        else
            dialog --colors --title "错误" --msgbox "${FG_RED}无法识别的包管理器。请手动安装以下依赖：${RESET}\n${missing_deps[*]}" 10 60
            exit 1
        fi

        # 执行安装
        if [[ -n "$install_cmd" ]]; then
            dialog --colors --title "正在安装依赖" --infobox "执行更新命令: $update_cmd\n执行安装命令: $install_cmd" 10 70
            eval "$update_cmd" # 执行更新命令
            if eval "$install_cmd"; then
                dialog --colors --title "安装成功" --infobox "依赖安装尝试完成。" 5 60
                sleep 1
            else
                dialog --colors --title "安装失败" --msgbox "${FG_RED}依赖安装失败。${RESET}\n请尝试手动安装缺失的依赖。" 8 60
                # 不退出，继续检查，让用户知道哪些还没装上
            fi
        else
             dialog --colors --title "警告" --msgbox "${FG_YELLOW}未能确定需要安装的包，请手动检查依赖。${RESET}" 8 60
        fi

        # 再次检查依赖
        missing_deps=()
        for cmd in "${dependencies[@]}"; do
            if ! command -v "$cmd" &> /dev/null; then
                missing_deps+=("$cmd")
            fi
        done

        if [[ ${#missing_deps[@]} -gt 0 ]]; then
            dialog --colors --title "依赖检查失败" --msgbox "${FG_RED}以下依赖在尝试安装后仍然缺失：${RESET}\n${missing_deps[*]}\n\n${FG_RED}脚本无法继续，请手动安装它们。${RESET}" 12 60
            exit 1
        fi

    fi # end if $install_needed

    # 所有依赖检查通过，创建标记文件
    dialog --colors --title "设置完成" --infobox "依赖检查通过，创建首次运行标记..." 5 60
    if echo "1" | sudo tee "$INIT_FLAG" > /dev/null; then
        sleep 1
    else
        dialog --colors --title "警告" --msgbox "${FG_YELLOW}无法创建首次运行标记文件 '$INIT_FLAG'。${RESET}\n依赖检查可能会在下次运行时重复执行。" 8 70
        sleep 2
    fi
    clear
fi # end if init flag check

check_for_update() {
    local urls=(
        "https://nclatest.znin.net/"
        "https://jiashu.1win.eu.org/https://api.github.com/repos/NapNeko/NapCatQQ/releases/latest"
		"https://napcatversion.109834.xyz/https://api.github.com/repos/NapNeko/NapCatQQ/releases/latest"
        "https://spring-night-57a1.3540746063.workers.dev/https://api.github.com/repos/NapNeko/NapCatQQ/releases/latest"
		"https://api.github.com/repos/NapNeko/NapCatQQ/releases/latest"
    )
    local result_file
    result_file=$(mktemp) # Make temp file local to function scope
    # Setup trap local to the function's execution context
    trap 'rm -f "$result_file"; pkill -P $$ &>/dev/null' RETURN INT TERM

    local latest_tag_numeric=""
    local original_tag=""
    local numeric_tag=""

    # --- 子函数：获取标签并写入临时文件 (保持不变) ---
    fetch_and_write() {
        local url="$1"
        local tmp_file="$2"
        local tag
        # 将 jq 的 stderr 重定向到 /dev/null
        tag=$(curl -s --connect-timeout 5 "$url" | jq -r '.tag_name // empty' 2>/dev/null)
        # 检查 jq 的退出状态以及 tag 是否有效
        if [[ $? -eq 0 ]] && [[ -n "$tag" ]] && [[ "$tag" != "null" ]]; then
            (
                # 使用 flock 确保只有一个进程写入文件
                flock -n 9 || exit 1
                # 再次检查文件是否为空，防止并发写入覆盖
                if [[ ! -s "$tmp_file" ]]; then
                    echo "$tag" > "$tmp_file"
                fi
            ) 9>"$tmp_file"
        # else # 可选：如果需要记录 jq 失败，可以在这里添加日志
            # echo "jq failed or returned empty/null for $url" >&2
        fi
    }
    # --- 子函数结束 ---

    # --- 并发获取远程版本 ---
    local url
    for url in "${urls[@]}"; do
        fetch_and_write "$url" "$result_file" &
    done

    local wait_timeout=5
    local i
    for (( i=0; i < wait_timeout * 10; i++ )); do
        if [[ -s "$result_file" ]]; then
            break
        fi
        sleep 0.1
    done
    # --- 获取结束 ---

    # --- 处理远程版本结果 ---
    if [[ -s "$result_file" ]]; then
        original_tag=$(head -n 1 "$result_file")
        # 去除 v 和 . 只留下数字
        numeric_tag="${original_tag//[v.]/}"
        echo "获取到最新发布版本的数字标签是: $numeric_tag"
        latest_tag_numeric=$numeric_tag
    else
        echo "错误：在 ${wait_timeout} 秒内未能从任何源获取远程版本标签。" >&2
        return 2 # API 查询失败
    fi
    # --- 处理结束 ---

    # --- 获取并处理本地版本 ---
    local local_file="/opt/QQ/resources/app/app_launcher/napcat/napcat.mjs"
    local local_version_string=""
    local local_version_numeric=""

    if [[ ! -f "$local_file" ]] || [[ ! -r "$local_file" ]]; then
        echo "错误：无法读取本地文件 '$local_file'。" >&2
        return 2 # 无法读取本地文件，视为失败
    fi

    # 尝试提取版本字符串
    # 使用 grep 查找包含 'const version = "' 的行，然后用 sed 提取引号内的内容
    local_version_string=$(grep 'const version = "' "$local_file" | sed -n 's/.*const version = "\([^"]*\)".*/\1/p')

    if [[ -z "$local_version_string" ]]; then
        echo "错误：无法在 '$local_file' 中找到 'const version = \"...\"' 格式的版本号。" >&2
        return 2 # 无法解析本地版本，视为失败
    fi

    # 去除 v 和 . 只留下数字
    local_version_numeric="${local_version_string//[v.]/}"
    echo "获取到本地版本的数字标签是: $local_version_numeric"
    # --- 本地版本处理结束 ---

    # --- 版本比较 ---
    # 确保两者都是数字（或至少看起来像数字）
    if ! [[ "$latest_tag_numeric" =~ ^[0-9]+$ ]] || ! [[ "$local_version_numeric" =~ ^[0-9]+$ ]]; then
         echo "错误：获取到的版本号格式不正确，无法比较。" >&2
         return 2 # 版本号格式错误
    fi

    # 使用 Bash 算术比较
    if [[ "$latest_tag_numeric" -gt "$local_version_numeric" ]]; then
        echo "检测到新版本 (远程: $original_tag > 本地: $local_version_string)。"
        return 1 # API 版本大于本地版本
    else
        echo "当前已是最新版本或更新 (远程: $original_tag <= 本地: $local_version_string)。"
        return 0 # API 版本小于或等于本地版本
    fi
    # --- 比较结束 ---
}


_get_napcat_pid_and_account() {
    local pid_file="/var/run/napcat.pid"
    local pid=""
    local cmdline=""
    local qq_account=""

    if [[ ! -f "$pid_file" ]] || [[ ! -r "$pid_file" ]]; then
        return 3 # PID 文件问题
    fi

    pid=$(cat "$pid_file")
    if [[ -z "$pid" ]] || ! sudo kill -0 "$pid" 2>/dev/null; then
        # sudo rm -f "$pid_file" 2>/dev/null # 可选清理
        return 1 # 未运行
    fi

    # 尝试从主进程命令行获取
    cmdline=$(ps -o cmd= -p "$pid" 2>/dev/null)
    if [[ "$cmdline" =~ .*-q[[:space:]]+([0-9]{4,}) ]]; then
        qq_account="${BASH_REMATCH[1]}"
        echo "$qq_account" # 输出 QQ 账号
        return 0 # 运行中
    fi

    # 尝试从子进程命令行获取
    local child_pids=$(pgrep -P "$pid")
    for child_pid in $child_pids; do
        child_cmdline=$(ps -o cmd= -p "$child_pid" 2>/dev/null)
        if [[ "$child_cmdline" =~ qq.*-q[[:space:]]+([0-9]{4,}) ]]; then
             qq_account="${BASH_REMATCH[1]}"
             echo "$qq_account" # 输出 QQ 账号
             return 0 # 运行中
        fi
    done

    # 如果都找不到
    echo "$pid" # 输出 PID 供参考
    return 2 # 状态未知
}

# 复制 get_napcat_status 函数 (或者理想情况下从共享库加载)
get_napcat_status() {
    local status_code
    local output

    # 调用内部函数，捕获输出和状态码
    output=$(_get_napcat_pid_and_account)
    status_code=$?

    case $status_code in
        0) # 运行中
            local qq_account="$output"
            echo -e "${FG_GREEN}运行中😋 - ${BOLD}$qq_account${RESET}"
            ;;
        1 | 3) # 未运行 或 PID 文件问题
            echo -e "${FG_YELLOW}未运行😴${RESET}"
            ;;
        2) # 状态未知
            local pid="$output"
            echo -e "${FG_RED}状态未知🤔 (PID: ${BOLD}$pid${RESET})${RESET}"
            ;;
        *) # 其他未知错误
             echo -e "${FG_RED}检查状态出错${RESET}"
             ;;
    esac
    # 注意：此函数现在只负责 echo，不返回状态码给调用者
}


stop_napcat() {
    local pid_file="/var/run/napcat.pid"
    local pid=""
    dialog --colors --title "停止 Napcat" --infobox "正在尝试停止 Napcat..." 5 50
    if [[ -f "$pid_file" ]] && [[ -r "$pid_file" ]]; then
        pid=$(cat "$pid_file")
        if [[ -n "$pid" ]] && sudo kill -0 "$pid" 2>/dev/null; then
            echo -e "${ANSI_YELLOW}正在终止进程 PID: $pid...${ANSI_RESET}"
            sudo kill "$pid"
            sleep 2
            if sudo kill -0 "$pid" 2>/dev/null; then
                echo -e "${ANSI_RED}正常终止失败，尝试强制终止...${ANSI_RESET}"
                sudo kill -9 "$pid"
                sleep 1
            fi
            if ! sudo kill -0 "$pid" 2>/dev/null; then
                echo -e "${ANSI_GREEN}进程已终止。${ANSI_RESET}"
                sudo rm -f "$pid_file"
                dialog --colors --title "停止成功" --msgbox "Napcat 进程已停止。" 6 50
            else
                dialog --colors --title "停止失败" --msgbox "${FG_RED}无法停止 Napcat 进程 (PID: $pid)。${RESET}\n请手动检查。" 8 60
            fi
        else
            dialog --colors --title "无需停止" --msgbox "Napcat 未在运行 (根据 PID 文件)。" 6 50
            sudo rm -f "$pid_file" 2>/dev/null # 清理无效文件
        fi
    else
        dialog --colors --title "无需停止" --msgbox "Napcat 未在运行 (无 PID 文件)。" 6 50
    fi
    sleep 1 # 短暂显示 echo 的信息
}

update_napcat() {
    dialog --colors --title "更新 Napcat" --yesno "这将执行官方在线安装/更新脚本。\n\n参数: --docker n --cli y\n\n确定要继续吗？" 10 60 2>&1 >/dev/tty
    choice=$?
    clear
    if [[ $choice -eq 0 ]]; then # Yes
        dialog --colors --title "正在更新 Napcat" --infobox "正在执行在线更新脚本...\ncurl -sSL $INSTALL_SCRIPT_URL | sudo bash -s -- --docker n --cli y" 8 70
        # 直接执行在线脚本
        if curl -sSL "$INSTALL_SCRIPT_URL" | sudo bash -s -- --docker n --cli y; then
            dialog --colors --title "更新成功" --msgbox "Napcat 更新脚本执行成功！" 6 50
        else
            dialog --colors --title "更新失败" --msgbox "${FG_RED}Napcat 更新脚本执行失败。${RESET}\n请检查网络连接或脚本输出。" 8 60
        fi
    else
        dialog --colors --title "已取消" --msgbox "更新操作已取消。" 6 40
    fi
}

view_log() {
    local status_code
    local output
    local current_qq_account=""
    local current_qq_log_file_path="" # 当前活动QQ的日志文件完整路径
    local log_menu_items=()           # Dialog菜单项数组
    local log_file_path               # 循环时使用的日志文件路径
    local qq_from_filename            # 从文件名提取的QQ号
    local bn                          # basename
    local choice_tag                  # Dialog选择的标签（即文件路径）
    local dialog_exit_status          # Dialog退出状态

    # 获取当前运行的QQ号
    output=$(_get_napcat_pid_and_account)
    status_code=$?

    if [[ "$status_code" -eq 0 ]]; then
        current_qq_account="$output"
        current_qq_log_file_path="/var/log/napcat_${current_qq_account}.log"
    fi

    # 查找所有的napcat日志文件
    local all_log_files=()
    while IFS= read -r -d $'\0' file; do
        all_log_files+=("$file")
    done < <(find /var/log/ -maxdepth 1 -type f -name "napcat_*.log" -print0)

    if [[ ${#all_log_files[@]} -eq 0 ]]; then
        dialog --colors --title "日志文件缺失" --msgbox "在 /var/log/ 目录下没有找到 Napcat 日志文件。" 8 60
        return 1
    fi

    # 填充菜单项
    local active_log_added_to_menu=false
    # 优先添加当前运行的QQ
    if [[ -n "$current_qq_account" ]] && [[ -f "$current_qq_log_file_path" ]]; then
        
        local found_active_in_all=false
        for file_in_all in "${all_log_files[@]}"; do
            if [[ "$file_in_all" == "$current_qq_log_file_path" ]]; then
                found_active_in_all=true
                break
            fi
        done
        if $found_active_in_all; then
            log_menu_items+=("$current_qq_log_file_path" "QQ: $current_qq_account ${FG_GREEN}(当前活动)${RESET}")
            active_log_added_to_menu=true
        fi
    fi

    # 添加其他日志文件
    for log_file_path in "${all_log_files[@]}"; do
        # 如果是活动日志且已被添加
        if $active_log_added_to_menu && [[ "$log_file_path" == "$current_qq_log_file_path" ]]; then
            continue
        fi

        bn=$(basename "$log_file_path")
        if [[ "$bn" =~ napcat_([0-9]+)\.log ]]; then
            qq_from_filename="${BASH_REMATCH[1]}"
            log_menu_items+=("$log_file_path" "QQ: $qq_from_filename")
        else
            # 对于不符合 napcat_NUM.log 格式的文件名
            log_menu_items+=("$log_file_path" "$bn")
        fi
    done

    if [[ ${#log_menu_items[@]} -eq 0 ]]; then
        # 此情况意味着找到了日志文件，但无法处理成菜单项
        dialog --colors --title "无有效日志" --msgbox "找到了日志文件，但无法解析以供选择。" 8 70
        return 1
    fi

    local num_dialog_items=$(( ${#log_menu_items[@]} / 2 ))
    # 如果菜单项数量为0
    if [[ $num_dialog_items -eq 0 ]]; then
        dialog --colors --title "错误" --msgbox "准备日志菜单时发生内部错误。" 8 60
        return 1
    fi
    
    choice_tag=$(dialog --colors --title "选择日志文件" \
                        --ok-label "查看" \
                        --cancel-label "返回" \
                        --menu "请选择要查看的日志文件:" \
                        20 70 "$num_dialog_items" \
                        "${log_menu_items[@]}" \
                        2>&1 >/dev/tty)
    
    dialog_exit_status=$?
    clear # 清除Dialog界面

    if [[ $dialog_exit_status -eq 0 ]]; then # "查看"
        local selected_log_file="$choice_tag" 
        if [[ -n "$selected_log_file" ]] && [[ -f "$selected_log_file" ]] && [[ -r "$selected_log_file" ]]; then
            echo -e "${ANSI_GREEN}正在打开日志: ${ANSI_BOLD}$selected_log_file${ANSI_RESET}"
            echo -e "${ANSI_YELLOW}使用 ↑ ↓箭头键 或 PageUp/PageDown 键翻页, 按 'q' 键退出查看。${ANSI_RESET}"
            sleep 1
            less -R +G "$selected_log_file" 
            clear # less退出后清理屏幕
            return 0
        else
            dialog --colors --title "文件错误" --msgbox "${FG_RED}选择的日志文件无法访问或无效:${RESET}\n$selected_log_file" 8 70
            return 1
        fi
    else # 用户按下了 "返回" 或 ESC
        # 不需要额外提示，直接返回主菜单
        return 1 
    fi
}
# --- 主菜单循环 ---
while true; do
    # 检查更新
    check_for_update
    update_check_status=$?
    update_display_status=""
    case $update_check_status in
        1) update_display_status="${FG_YELLOW}有可用更新${RESET}" ;;
        0) update_display_status="${FG_GREEN}已是最新${RESET}" ;;
        *) update_display_status="${FG_RED}检查失败${RESET}" ;;
    esac

    # 获取运行状态
    NAPCAT_STATUS=$(get_napcat_status)

    # 定义菜单项 (添加 LOG)
    MENU_ITEMS=(
        "START"  "启动 Napcat"
        "STOP"   "停止 Napcat"
        "CONFIG" "配置 Napcat"
        "UPDATE" "更新 Napcat"
        "LOG"    "查看日志"   # 新增日志选项
    )

    # 显示菜单 (调整尺寸和项目数)
    # 显示菜单
    CHOICE=$(dialog --colors --clear --backtitle "Napcat Shell 主菜单" \
                    --title "🌟 NapcatShell 🌟" \
                    --ok-label "选择" \
                    --cancel-label "退出" \
                    --menu "\n更新状态: ${update_display_status}\n运行状态: ${NAPCAT_STATUS}\n\n请选择操作:" \
                    16 60 5 \
                    "${MENU_ITEMS[@]}" \
                    2>&1 >/dev/tty)

    exit_status=$?
    clear

    case $exit_status in
        0) # OK - 用户选择了某项
            case "$CHOICE" in
                "START")
                    if [[ -f "$BOOT_SCRIPT" ]] && [[ -x "$BOOT_SCRIPT" ]]; then
                        "$BOOT_SCRIPT" # 执行启动脚本
                    else
                        dialog --colors --msgbox "${FG_RED}错误：${RESET}无法找到或执行启动脚本 '$BOOT_SCRIPT'。" 8 60
                    fi
                    ;;
                "STOP")
                    stop_napcat # 调用停止函数
                    ;;
                "CONFIG")
                    if [[ -f "$CONFIG_SCRIPT" ]] && [[ -x "$CONFIG_SCRIPT" ]]; then
                        "$CONFIG_SCRIPT" # 执行配置脚本
                    else
                        dialog --colors --msgbox "${FG_RED}错误：${RESET}无法找到或执行配置脚本 '$CONFIG_SCRIPT'。" 8 60
                    fi
                    ;;
                "UPDATE")
                    update_napcat # 调用更新函数
                    ;;
                "LOG") # 新增 LOG 分支
                    view_log # 调用查看日志函数
                    ;;
                *)
                    dialog --colors --msgbox "无效的选择: '$CHOICE'" 6 40
                    ;;
            esac
            ;;
        1) # Cancel - 用户选择退出
            echo -e "${ANSI_YELLOW}已退出 NapcatShell。${ANSI_RESET}"
            break # 退出主循环
            ;;
        *) # 其他情况 (例如 ESC)
            echo -e "${ANSI_YELLOW}操作已取消或发生未知错误 (退出码: $exit_status)。${ANSI_RESET}"
            break # 退出主循环
            ;;
    esac
done

# 清理屏幕并退出
clear
exit 0
